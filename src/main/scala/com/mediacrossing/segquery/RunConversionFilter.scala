package com.mediacrossing.segquery

import java.io.FileReader
import com.mediacrossing.connections.{MxService, AppNexusService}
import com.mediacrossing.properties.ConfigurationProperties
import org.slf4j.LoggerFactory

import scala.collection.JavaConversions._
import au.com.bytecode.opencsv.CSVReader

object RunConversionFilter extends App {

  val LOG = LoggerFactory.getLogger(RunConversionFilter.getClass)
  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler {
    def uncaughtException(t: Thread, e: Throwable) {
      LOG.error(e.getMessage, e)
    }
  })

  val properties: ConfigurationProperties = new ConfigurationProperties(args)
  val anConn: AppNexusService = new AppNexusService(properties.getPutneyUrl)
  val mxConn: MxService = new MxService(properties.getMxUrl, properties.getMxUsername, properties.getMxPassword)

  // List of Lines to keep
  val keepers = List("1527050",
    "1527052",
    "1527057",
    "1527063",
    "1546052",
    "1546056",
    "1546059",
    "1546541",
    "1576030",
    "1576031",
    "1576033",
    "1576034",
    "1576450",
    "1576452",
    "1576454",
    "1576455",
    "1576615",
    "1576624",
    "1576625",
    "1576626",
    "1579882",
    "1579884",
    "1579885",
    "1591990",
    "1591992",
    "1591994",
    "1591996",
    "1598435",
    "1598439",
    "1598445",
    "1598450",
    "1608090",
    "1608093",
    "1608096",
    "1611835",
    "1611844",
    "1611850",
    "1612064",
    "1612078",
    "1612099",
    "1612380",
    "1612381",
    "1612384",
    "1612875",
    "1612877",
    "1612878",
    "1612881",
    "1623099",
    "1627381",
    "1627383",
    "1627384",
    "1627410",
    "1628446",
    "1628448",
    "1628449",
    "1628450",
    "1629473",
    "1629486",
    "1629496",
    "1630573",
    "1630575",
    "1630580",
    "1630593",
    "1630608",
    "1630627",
    "1630662",
    "1639778",
    "1639780",
    "1639781",
    "1639806",
    "1639807",
    "1639808",
    "1640098",
    "1640101",
    "1640102",
    "1655917",
    "1655918",
    "1655919",
    "1664758",
    "1664761",
    "1664762",
    "1667980",
    "1667981",
    "1667985",
    "1668040",
    "1668042",
    "1668043",
    "1668069",
    "1669267",
    "1669268",
    "1669269",
    "1669327",
    "1669328",
    "1669329",
    "1671978",
    "1671980",
    "1671985",
    "1672193",
    "1672195",
    "1672197",
    "1696788",
    "1696792",
    "1696833",
    "1696834",
    "1696840",
    "1697266",
    "1697326",
    "1697330",
    "1697334",
    "1697338",
    "1700197",
    "1700202",
    "1701073",
    "1701226",
    "1701233",
    "1701236",
    "1701423",
    "1710455",
    "1710458",
    "1710462",
    "1720336",
    "1720339",
    "1720342",
    "1720857",
    "1720860",
    "1730052",
    "1730054",
    "1730751",
    "1730752",
    "1745379",
    "1745380",
    "1745392",
    "1746099",
    "1748047",
    "1748051",
    "1748058",
    "1754221",
    "1761447",
    "1762674",
    "1762678",
    "1762680",
    "1767535",
    "1767544",
    "1780012",
    "1555840",
    "1555842",
    "1555843",
    "1572674",
    "1598805",
    "1599190",
    "1599192",
    "1599194",
    "1600883",
    "1612259",
    "1618639",
    "1618642",
    "1618660",
    "1618671",
    "1618674",
    "1618675",
    "1638013",
    "1651141",
    "1651143",
    "1651144",
    "1655273",
    "1655275",
    "1655278",
    "1660533",
    "1660535",
    "1660539",
    "1660541",
    "1669140",
    "1669145",
    "1669149",
    "1669156",
    "1675037",
    "1675038",
    "1675039",
    "1675403",
    "1675406",
    "1675408",
    "1686976",
    "1686977",
    "1686979",
    "1686980",
    "1689009",
    "1689012",
    "1689016",
    "1689046",
    "1689050",
    "1689059",
    "1696870",
    "1696905",
    "1701503",
    "1706612",
    "1710515",
    "1710517",
    "1710521",
    "1710527",
    "1720274",
    "1720277",
    "1720278",
    "1724088",
    "1724089",
    "1724090",
    "1730391",
    "1730395",
    "1745044",
    "1745049",
    "1745062",
    "1745068",
    "1761801",
    "1761806",
    "1761810",
    "1762052",
    "1762251",
    "1765105",
    "1765117",
    "1772891",
    "1772920",
    "1772926",
    "1772949",
    "1772985",
    "1780367",
    "1819113",
    "1819117",
    "1819120",
    "1819122",
    "1819124",
    "1423426",
    "1423429",
    "1423432",
    "1423433",
    "1559617",
    "1559635",
    "1559657",
    "1559659",
    "1559662",
    "1582739",
    "1582745",
    "1582746",
    "1603357",
    "1603369",
    "1603372",
    "1603373",
    "1615766",
    "1615769",
    "1615775",
    "1615776",
    "1615826",
    "1671914",
    "1778001",
    "1778008",
    "1778017",
    "1780764",
    "1780767",
    "1788203",
    "1788205",
    "1788208",
    "1788560",
    "1789111",
    "1555161",
    "1555165",
    "1555167",
    "1555169",
    "1579486",
    "1579488",
    "1579491",
    "1582807",
    "1582809",
    "1582810",
    "1601365",
    "1601367",
    "1601389",
    "1601917",
    "1601918",
    "1601920",
    "1606583",
    "1606585",
    "1606589",
    "1608548",
    "1608552",
    "1608555",
    "1608572",
    "1608573",
    "1608574",
    "1608643",
    "1608646",
    "1608647",
    "1608648",
    "1608721",
    "1608724",
    "1608746",
    "1622327",
    "1622524",
    "1622526",
    "1622531",
    "1622594",
    "1622595",
    "1622598",
    "1623084",
    "1623086",
    "1623088",
    "1623089",
    "1627390",
    "1629587",
    "1629591",
    "1629830",
    "1630269",
    "1632118",
    "1633745",
    "1637498",
    "1637499",
    "1637500",
    "1637980",
    "1637981",
    "1637982",
    "1642552",
    "1642554",
    "1642556",
    "1642557",
    "1642559",
    "1642560",
    "1642588",
    "1642590",
    "1642592",
    "1642636",
    "1642637",
    "1642638",
    "1642706",
    "1642707",
    "1642708",
    "1650575",
    "1650664",
    "1663762",
    "1664612",
    "1664615",
    "1664618",
    "1664672",
    "1664674",
    "1664678",
    "1665820",
    "1665821",
    "1665823",
    "1665824",
    "1669040",
    "1669041",
    "1669044",
    "1677724",
    "1677725",
    "1677727",
    "1680404",
    "1680497",
    "1680498",
    "1680501",
    "1680507",
    "1680575",
    "1688891",
    "1688917",
    "1688918",
    "1688921",
    "1688956",
    "1688957",
    "1688963",
    "1691763",
    "1696989",
    "1696994",
    "1696996",
    "1706573",
    "1706577",
    "1706578",
    "1706855",
    "1706859",
    "1706861",
    "1713868",
    "1713875",
    "1713879",
    "1720428",
    "1720431",
    "1720565",
    "1720567",
    "1720569",
    "1723822",
    "1723825",
    "1727242",
    "1727547",
    "1727548",
    "1730919",
    "1730920",
    "1737769",
    "1737789",
    "1737804",
    "1744157",
    "1750177",
    "1750185",
    "1769461",
    "1769463",
    "1769465",
    "1769469",
    "1775508",
    "1775509",
    "1777725",
    "1586324",
    "1586326",
    "1586327",
    "1586417",
    "1623077",
    "1623078",
    "1623079",
    "1623080",
    "1650156",
    "1650161",
    "1650164",
    "1650179",
    "1668322",
    "1668324",
    "1668326",
    "1697925",
    "1697927",
    "1697928",
    "1697929",
    "1714538",
    "1714539",
    "1723033",
    "1723035",
    "1733972",
    "1748941",
    "1748944",
    "1748951",
    "1761366",
    "1761368",
    "1762298",
    "1762343",
    "1765470",
    "1765479",
    "1777865",
    "1777867",
    "1777874",
    "1777876",
    "1787749",
    "1798754",
    "1601981",
    "1601983",
    "1601984")

  val camps = mxConn.requestAllCampaigns()
    .toList
    .filter(c => keepers.contains(c.getLineItemID))
    .map(c => c.getId)

  // read in file
  val fileName = "Motosports_Unfiltered_Convs"
  val newFileName = "ArenaCross_Filtered_Convs.csv"
  val reader: CSVReader = new CSVReader(new FileReader("/Users/charronkyle/Downloads/" + fileName + ".csv"))
  val convs: List[Array[String]] = reader.readAll
    .toList
    .filter(c => camps.contains(c(0).substring(c(0).length-8, c(0).length-1)))
    .filter(c => c(0).toLowerCase.contains("ax"))

  val path = (new java.io.File("/Users/charronkyle/Downloads/", newFileName)).getAbsolutePath()
  val pw = new java.io.PrintWriter(path)

  pw.println("Campaign, Creative, Post Click/Post View, Revenue, Order ID, Imp Time, DateTime, Difference, Conversion Recency")
  convs.foreach(c => pw.println(c.mkString(",")))

  pw.close()


  // filter file

  // spit out file



}
